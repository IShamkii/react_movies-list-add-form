{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","checkValidationUrl","checkedUrl","onChange","useState","Math","random","toFixed","slice","id","touched","setTouched","hasError","hasErrorValidation","htmlFor","type","classNames","event","onBlur","checkValidation","pattern","url","test","urlValidationPattern","NewMovie","onAdd","count","setCount","newMovie","setNewMovie","handleChange","target","prevMovie","checkedImgUrl","setCheckedImgUrl","checkedImdbUrl","setCheckedImdbUrl","isDisabled","useEffect","onSubmit","preventDefault","currentCount","disabled","App","moviesFromServer","setMovies","currentMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1cc288ab.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  checkValidationUrl?: boolean,\n  checkedUrl?: boolean,\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  checkValidationUrl,\n  checkedUrl,\n  onChange = () => {},\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  const [touched, setTouched] = useState(false);\n  const hasError = touched && required && !value;\n  const hasErrorValidation = touched && checkValidationUrl && !checkedUrl;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          name={name}\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => onChange(event)}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n\n      {hasErrorValidation && (\n        <p className=\"help is-danger\">{`${label} is not valid`}</p>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\nfunction checkValidation(pattern: RegExp, url: string): boolean {\n  return url === '' || pattern.test(url);\n}\n\n// eslint-disable-next-line max-len\nconst urlValidationPattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n\n  const [newMovie, setNewMovie] = useState({\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n  });\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n\n    setNewMovie((prevMovie) => ({ ...prevMovie, [name]: value }));\n  };\n\n  const [checkedImgUrl, setCheckedImgUrl] = useState(false);\n  const [checkedImdbUrl, setCheckedImdbUrl] = useState(false);\n\n  const isDisabled = !newMovie.title\n    || !newMovie.imgUrl\n    || !newMovie.imdbUrl\n    || !newMovie.imdbId\n    || !checkedImgUrl\n    || !checkedImdbUrl;\n\n  useEffect(() => {\n    setCheckedImgUrl(\n      checkValidation(urlValidationPattern, newMovie.imgUrl),\n    );\n\n    setCheckedImdbUrl(\n      checkValidation(urlValidationPattern, newMovie.imdbUrl),\n    );\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [newMovie.imgUrl, newMovie.imdbUrl]);\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    onAdd(newMovie);\n\n    setCount(currentCount => currentCount + 1);\n\n    setNewMovie({\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n    });\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={newMovie.title}\n        required\n        onChange={handleChange}\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"description\"\n        value={newMovie.description}\n        onChange={handleChange}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={newMovie.imgUrl}\n        required\n        checkValidationUrl\n        checkedUrl={checkedImgUrl}\n        onChange={handleChange}\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={newMovie.imdbUrl}\n        required\n        checkValidationUrl\n        checkedUrl={checkedImdbUrl}\n        onChange={handleChange}\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={newMovie.imdbId}\n        required\n        onChange={handleChange}\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={isDisabled}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n\n  const addMovie = (movie: Movie) => {\n    setMovies(currentMovies => [...currentMovies, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}